Here’s a step-by-step guide to secure your Next.js (TypeScript) app with authentication, rate limiting, and other best practices using pnpm as your package manager. Each step includes implementation details.

1. Set Up Environment Variables
Store sensitive data in .env.local:

env

JWT_SECRET=your_super_secure_secret_key
Steps:

Create a .env.local file in the root of your project.
Add environment variables like JWT_SECRET.
Never commit .env.local to your repository (it’s ignored by default in Next.js).
2. Install Required Packages
Run these commands to install essential packages:
  

pnpm add jsonwebtoken bcryptjs zod next-safe-middleware
pnpm add -D @types/jsonwebtoken @types/bcryptjs
3. Add Middleware for Authentication
Secure your API routes by creating middleware that checks for a valid JWT.

Create Middleware:
Add a middleware.ts file to your project root:

ts
Copy code
import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';

export function middleware(req: NextRequest) {
  const token = req.headers.get('Authorization')?.split(' ')[1];

  if (!token || !isValidToken(token)) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  return NextResponse.next();
}

function isValidToken(token: string) {
  try {
    jwt.verify(token, process.env.JWT_SECRET!);
    return true;
  } catch {
    return false;
  }
}

export const config = { matcher: '/api/:path*' };
This middleware will run for all API routes (/api/*) and reject unauthorized requests.

Restart your development server:

bash
Copy code
pnpm dev
4. Protect API Routes
Ensure only authenticated users can access sensitive endpoints.

Example API route (pages/api/secure-data.ts):

ts
Copy code
import { NextApiRequest, NextApiResponse } from 'next';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  res.status(200).json({ data: 'This is secure data!' });
}
5. Create Secure Token (JWT)
Generate a token during login or user authentication:

ts
Copy code
import jwt from 'jsonwebtoken';

export function generateToken(userId: string): string {
  return jwt.sign({ userId }, process.env.JWT_SECRET!, { expiresIn: '1h' });
}
Usage in an API route (pages/api/login.ts):

ts
Copy code
import type { NextApiRequest, NextApiResponse } from 'next';
import bcrypt from 'bcryptjs';
import { generateToken } from '../../utils/auth';

const users = [{ id: '1', username: 'user', password: '$2a$10$hashedpassword' }]; // Example

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { username, password } = req.body;

  const user = users.find((u) => u.username === username);
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({ error: 'Invalid credentials' });
  }

  const token = generateToken(user.id);
  res.status(200).json({ token });
}
6. Implement Rate Limiting
Prevent abuse by limiting API requests using a rate-limiting library.

Install a rate limiter:

bash
Copy code
pnpm add next-rate-limiter
Example rate limiter for API routes:

ts
Copy code
import { rateLimit } from 'next-rate-limiter';

const limiter = rateLimit({
  tokensPerInterval: 5, // 5 requests
  interval: '1m',       // per minute
});

export default async function handler(req, res) {
  const { success } = await limiter.check(res, 5, 'CACHE_KEY');
  if (!success) return res.status(429).json({ error: 'Too Many Requests' });

  res.status(200).json({ data: 'Hello, world!' });
}
7. Add Secure Headers
Enhance security using HTTP headers.

Install @next-safe/middleware:

bash
Copy code
pnpm add @next-safe/middleware
Enable the middleware in middleware.ts:

ts
Copy code
import createMiddleware from '@next-safe/middleware';

export const middleware = createMiddleware({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'"],
    },
  },
  xFrameOptions: 'DENY',
  xContentTypeOptions: 'nosniff',
});
8. CORS Settings
Use CORS to restrict access to your API.

Install CORS middleware:

bash
Copy code
pnpm add cors
Example usage in an API route:

ts
Copy code
import Cors from 'cors';

const cors = Cors({
  methods: ['GET', 'POST'], // Allowed methods
  origin: 'https://yourdomain.com', // Allowed origin
});

export default async function handler(req, res) {
  await cors(req, res);
  res.status(200).json({ data: 'Hello, world!' });
}
9. Testing
Use Postman or curl to test API routes.
Verify:
Unauthorized requests fail.
Authorized requests succeed.
Rate-limiting works.
Debug any errors in your terminal logs.
10. Deployment
Deploy on a secure platform like Vercel, which enforces HTTPS.
Double-check pnpm lockfile for dependency integrity:
bash
Copy code
pnpm audit
With this step-by-step setup, your Next.js app will have robust security for API routes while following best practices.